// Script para diagnosticar erro na aceita√ß√£o de pedidos
// Execute no console do navegador na p√°gina de pedidos

console.log('üîç DIAGN√ìSTICO DE ERRO NA ACEITA√á√ÉO DE PEDIDOS');
console.log('=' .repeat(50));

// 1. Verificar se h√° pedidos dispon√≠veis
const checkOrders = () => {
  console.log('\n1. üìã Verificando pedidos dispon√≠veis...');
  
  // Tentar encontrar elementos de pedidos na p√°gina
  const orderElements = document.querySelectorAll('[data-testid="order-card"], .order-card, [class*="order"]');
  console.log(`   Encontrados ${orderElements.length} elementos de pedido`);
  
  // Verificar bot√µes de aceitar
  const acceptButtons = document.querySelectorAll('button[data-testid="accept-order"], button:contains("Aceitar"), button:contains("Accept")');
  console.log(`   Encontrados ${acceptButtons.length} bot√µes de aceitar`);
  
  return { orderElements, acceptButtons };
};

// 2. Verificar erros no console
const checkConsoleErrors = () => {
  console.log('\n2. ‚ùå Verificando erros recentes...');
  
  // Interceptar erros futuros
  const originalError = console.error;
  const errors = [];
  
  console.error = function(...args) {
    errors.push(args);
    originalError.apply(console, args);
  };
  
  return errors;
};

// 3. Testar fun√ß√£o de atualiza√ß√£o de status
const testStatusUpdate = async () => {
  console.log('\n3. üß™ Testando fun√ß√£o de atualiza√ß√£o de status...');
  
  try {
    // Verificar se o Supabase est√° dispon√≠vel
    if (typeof window.supabase === 'undefined') {
      console.log('‚ùå Supabase n√£o est√° dispon√≠vel globalmente');
      return false;
    }
    
    // Testar conex√£o com o banco
    const { data, error } = await window.supabase
      .from('orders')
      .select('id, order_number, status')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erro ao conectar com o banco:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com banco OK');
    console.log('üìä Exemplo de pedido:', data[0]);
    return true;
    
  } catch (error) {
    console.log('‚ùå Erro no teste:', error.message);
    return false;
  }
};

// 4. Verificar autentica√ß√£o
const checkAuth = () => {
  console.log('\n4. üîê Verificando autentica√ß√£o...');
  
  try {
    // Verificar localStorage
    const authData = localStorage.getItem('supabase.auth.token');
    if (!authData) {
      console.log('‚ùå Token de autentica√ß√£o n√£o encontrado');
      return false;
    }
    
    console.log('‚úÖ Token de autentica√ß√£o encontrado');
    
    // Verificar se h√° dados do usu√°rio
    const userData = JSON.parse(authData);
    if (userData.user) {
      console.log('‚úÖ Usu√°rio logado:', userData.user.email);
      return true;
    } else {
      console.log('‚ùå Dados do usu√°rio n√£o encontrados');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao verificar autentica√ß√£o:', error.message);
    return false;
  }
};

// 5. Executar diagn√≥stico completo
const runDiagnostic = async () => {
  console.log('\nüöÄ EXECUTANDO DIAGN√ìSTICO COMPLETO...');
  console.log('=' .repeat(40));
  
  const results = {
    orders: checkOrders(),
    auth: checkAuth(),
    database: await testStatusUpdate(),
    errors: checkConsoleErrors()
  };
  
  console.log('\nüìä RESULTADOS DO DIAGN√ìSTICO:');
  console.log('=' .repeat(30));
  console.log('‚Ä¢ Pedidos na p√°gina:', results.orders.orderElements.length > 0 ? '‚úÖ' : '‚ùå');
  console.log('‚Ä¢ Bot√µes de aceitar:', results.orders.acceptButtons.length > 0 ? '‚úÖ' : '‚ùå');
  console.log('‚Ä¢ Autentica√ß√£o:', results.auth ? '‚úÖ' : '‚ùå');
  console.log('‚Ä¢ Conex√£o com banco:', results.database ? '‚úÖ' : '‚ùå');
  
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  if (!results.auth) {
    console.log('1. ‚ùå Fa√ßa login novamente');
  }
  if (!results.database) {
    console.log('2. ‚ùå Verifique a conex√£o com o banco de dados');
  }
  if (results.orders.orderElements.length === 0) {
    console.log('3. ‚ùå N√£o h√° pedidos para aceitar');
  }
  if (results.orders.acceptButtons.length === 0) {
    console.log('4. ‚ùå Bot√µes de aceitar n√£o encontrados');
  }
  
  return results;
};

// Executar automaticamente
runDiagnostic().then(results => {
  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
  console.log('üìã Para mais detalhes, verifique os logs acima.');
}).catch(error => {
  console.error('üí• Erro no diagn√≥stico:', error);
});

// Exportar fun√ß√µes para uso manual
window.orderDiagnostic = {
  checkOrders,
  checkAuth,
  testStatusUpdate,
  runDiagnostic
};

console.log('\nüîß COMANDOS DISPON√çVEIS:');
console.log('‚Ä¢ orderDiagnostic.runDiagnostic() - Executar diagn√≥stico completo');
console.log('‚Ä¢ orderDiagnostic.checkOrders() - Verificar pedidos na p√°gina');
console.log('‚Ä¢ orderDiagnostic.checkAuth() - Verificar autentica√ß√£o');
console.log('‚Ä¢ orderDiagnostic.testStatusUpdate() - Testar conex√£o com banco');