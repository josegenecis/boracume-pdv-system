// Script para testar manualmente a aceita√ß√£o de pedidos
// Execute no console do navegador na p√°gina de pedidos

console.log('üß™ TESTE MANUAL DE ACEITA√á√ÉO DE PEDIDOS');
console.log('=' .repeat(50));

// Fun√ß√£o para simular clique no bot√£o de aceitar
const testAcceptOrder = async () => {
  console.log('\n1. üîç Procurando bot√µes de aceitar pedido...');
  
  // Diferentes seletores poss√≠veis para bot√µes de aceitar
  const selectors = [
    'button[data-testid="accept-order"]',
    'button:contains("Aceitar")',
    'button:contains("Accept")',
    'button[class*="accept"]',
    'button[onclick*="accept"]',
    '.accept-button',
    '[data-action="accept"]'
  ];
  
  let acceptButton = null;
  
  for (const selector of selectors) {
    const buttons = document.querySelectorAll(selector);
    if (buttons.length > 0) {
      acceptButton = buttons[0];
      console.log(`‚úÖ Encontrado bot√£o com seletor: ${selector}`);
      break;
    }
  }
  
  if (!acceptButton) {
    // Procurar por texto
    const allButtons = document.querySelectorAll('button');
    for (const button of allButtons) {
      if (button.textContent.toLowerCase().includes('aceitar') || 
          button.textContent.toLowerCase().includes('accept')) {
        acceptButton = button;
        console.log('‚úÖ Encontrado bot√£o por texto:', button.textContent);
        break;
      }
    }
  }
  
  if (!acceptButton) {
    console.log('‚ùå Nenhum bot√£o de aceitar encontrado');
    console.log('üí° Bot√µes dispon√≠veis na p√°gina:');
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach((btn, index) => {
      console.log(`   ${index + 1}. "${btn.textContent.trim()}" - ${btn.className}`);
    });
    return false;
  }
  
  console.log('\n2. üñ±Ô∏è  Simulando clique no bot√£o...');
  
  try {
    // Interceptar erros antes do clique
    const errors = [];
    const originalError = console.error;
    console.error = function(...args) {
      errors.push(args);
      originalError.apply(console, args);
    };
    
    // Simular clique
    acceptButton.click();
    
    // Aguardar um pouco para ver se h√° erros
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Restaurar console.error
    console.error = originalError;
    
    if (errors.length > 0) {
      console.log('‚ùå Erros capturados durante o clique:');
      errors.forEach((error, index) => {
        console.log(`   ${index + 1}.`, ...error);
      });
      return false;
    } else {
      console.log('‚úÖ Clique executado sem erros vis√≠veis');
      return true;
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao clicar no bot√£o:', error.message);
    return false;
  }
};

// Fun√ß√£o para verificar mudan√ßas na p√°gina ap√≥s aceitar
const checkPageChanges = () => {
  console.log('\n3. üëÄ Verificando mudan√ßas na p√°gina...');
  
  // Verificar se h√° mensagens de sucesso/erro
  const toasts = document.querySelectorAll('[data-testid="toast"], .toast, [class*="toast"]');
  if (toasts.length > 0) {
    console.log('üì¢ Mensagens encontradas:');
    toasts.forEach((toast, index) => {
      console.log(`   ${index + 1}. ${toast.textContent.trim()}`);
    });
  } else {
    console.log('üì¢ Nenhuma mensagem de toast encontrada');
  }
  
  // Verificar se h√° modais abertos
  const modals = document.querySelectorAll('[role="dialog"], .modal, [class*="modal"]');
  if (modals.length > 0) {
    console.log('ü™ü Modais encontrados:');
    modals.forEach((modal, index) => {
      console.log(`   ${index + 1}. ${modal.textContent.substring(0, 100)}...`);
    });
  }
  
  // Verificar se h√° elementos de loading
  const loadings = document.querySelectorAll('[data-testid="loading"], .loading, [class*="loading"]');
  if (loadings.length > 0) {
    console.log('‚è≥ Elementos de loading encontrados:', loadings.length);
  }
};

// Fun√ß√£o para verificar o estado do Supabase
const checkSupabaseState = async () => {
  console.log('\n4. üóÑÔ∏è  Verificando estado do Supabase...');
  
  try {
    // Verificar se o cliente Supabase est√° dispon√≠vel
    if (typeof window.supabase === 'undefined') {
      console.log('‚ùå Cliente Supabase n√£o encontrado');
      return false;
    }
    
    // Verificar sess√£o atual
    const { data: { session }, error: sessionError } = await window.supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå Erro ao obter sess√£o:', sessionError.message);
      return false;
    }
    
    if (!session) {
      console.log('‚ùå Usu√°rio n√£o est√° logado');
      return false;
    }
    
    console.log('‚úÖ Usu√°rio logado:', session.user.email);
    
    // Testar consulta simples
    const { data, error } = await window.supabase
      .from('orders')
      .select('id, order_number, status')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erro ao consultar pedidos:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com banco OK');
    return true;
    
  } catch (error) {
    console.log('‚ùå Erro geral no Supabase:', error.message);
    return false;
  }
};

// Fun√ß√£o principal de teste
const runOrderAcceptanceTest = async () => {
  console.log('\nüöÄ INICIANDO TESTE COMPLETO...');
  console.log('=' .repeat(40));
  
  const results = {
    supabase: await checkSupabaseState(),
    buttonClick: await testAcceptOrder(),
    pageChanges: checkPageChanges()
  };
  
  console.log('\nüìä RESULTADOS DO TESTE:');
  console.log('=' .repeat(25));
  console.log('‚Ä¢ Estado do Supabase:', results.supabase ? '‚úÖ OK' : '‚ùå ERRO');
  console.log('‚Ä¢ Clique no bot√£o:', results.buttonClick ? '‚úÖ OK' : '‚ùå ERRO');
  
  console.log('\nüí° RECOMENDA√á√ïES:');
  if (!results.supabase) {
    console.log('1. ‚ùå Verifique a conex√£o com o banco de dados');
    console.log('2. ‚ùå Fa√ßa login novamente se necess√°rio');
  }
  if (!results.buttonClick) {
    console.log('3. ‚ùå Verifique se h√° pedidos para aceitar');
    console.log('4. ‚ùå Verifique os logs de erro no console');
  }
  
  return results;
};

// Fun√ß√£o para monitorar requisi√ß√µes de rede
const monitorNetworkRequests = () => {
  console.log('\n5. üåê Monitorando requisi√ß√µes de rede...');
  
  const originalFetch = window.fetch;
  const requests = [];
  
  window.fetch = function(...args) {
    const url = args[0];
    const options = args[1] || {};
    
    console.log('üì° Requisi√ß√£o:', options.method || 'GET', url);
    
    return originalFetch.apply(this, args)
      .then(response => {
        console.log('üì° Resposta:', response.status, url);
        if (!response.ok) {
          console.log('‚ùå Erro na resposta:', response.statusText);
        }
        return response;
      })
      .catch(error => {
        console.log('‚ùå Erro na requisi√ß√£o:', error.message, url);
        throw error;
      });
  };
  
  // Restaurar ap√≥s 30 segundos
  setTimeout(() => {
    window.fetch = originalFetch;
    console.log('üîÑ Monitoramento de rede desativado');
  }, 30000);
  
  console.log('‚úÖ Monitoramento de rede ativado por 30 segundos');
};

// Executar teste automaticamente
runOrderAcceptanceTest().then(results => {
  console.log('\n‚úÖ Teste conclu√≠do!');
  console.log('üîß Para monitorar requisi√ß√µes, execute: monitorNetworkRequests()');
}).catch(error => {
  console.error('üí• Erro no teste:', error);
});

// Exportar fun√ß√µes para uso manual
window.orderTest = {
  testAcceptOrder,
  checkPageChanges,
  checkSupabaseState,
  runOrderAcceptanceTest,
  monitorNetworkRequests
};

console.log('\nüîß COMANDOS DISPON√çVEIS:');
console.log('‚Ä¢ orderTest.runOrderAcceptanceTest() - Executar teste completo');
console.log('‚Ä¢ orderTest.testAcceptOrder() - Testar clique no bot√£o');
console.log('‚Ä¢ orderTest.checkSupabaseState() - Verificar Supabase');
console.log('‚Ä¢ orderTest.monitorNetworkRequests() - Monitorar requisi√ß√µes');